name: Playwright Tests
on:
  workflow_dispatch:

jobs:
  e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm i
      # - name: Install Playwright Browsers
      #   run: npx playwright install --with-deps
      - name: "Cache: Playwright browsers"
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.OS }}-x86-compositeV2-playwrightBrowsers-${{ hashFiles('**/package-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-x86-compositeV2-playwrightBrowsers-${{ env.cache-name }}-
            ${{ runner.OS }}-x86-compositeV2-playwrightBrowsers-

      - name: "Initialize: Install browsers"
        shell: bash
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          E2E_ENV: "Dev"
          AGENT_USERNAME: ${{ secrets.DEV_AGENT_USERNAME }}
          AGENT_PASSWORD: ${{ secrets.DEV_AGENT_PASSWORD }}
          AGENT_ID: ${{ secrets.DEV_AGENT_ID }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-playwright
          path: allure-results

  e2e-reports:
    runs-on: ubuntu-latest
    needs: [e2e]
    env:
      NODE_OPTIONS: "--max_old_space_size=7168"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm i

      - name: "Intitialize: Download artifacts"
        uses: actions/download-artifact@v3
        with:
          path: allure-results

      - name: "Install ts-node globally"
        run: npm install -g ts-node

      - run: mv allure-results allure-results-raw
        shell: bash

      - name: "Execute: Build web reports from allure-results"
        id: build-report
        run: |
          mkdir -p allure-results
          cp allure-results-raw/e2e-playwright/* allure-results
          rm -rf allure-results-raw && ls -R allure-results
          npx allure generate ./allure-results â€” clean
        continue-on-error: true

      - name: Deploy to Netlify
        uses: jsmrcaga/action-netlify-deploy@v2.0.0
        with:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          build_directory: ./allure-report
          build_command: echo "build"
      - name: log netlify
        run: echo ${{env.NETLIFY_PREVIEW_URL}}

      # - name: "Execute: Comment to Slack"
      #   shell: bash
      #   env:
      #     GITHUB_RUN_ID: ${{ github.run_id }}
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #   run: ts-node scripts/slack-report.ts
